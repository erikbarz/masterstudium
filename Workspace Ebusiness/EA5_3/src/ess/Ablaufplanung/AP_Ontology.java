// file: AP_OntologyOntology.java generated by ontology bean generator.  DO NOT EDIT, UNLESS YOU ARE REALLY SURE WHAT YOU ARE DOING!
package ess.Ablaufplanung;

import jade.content.onto.*;
import jade.content.schema.*;
import jade.util.leap.HashMap;
import jade.content.lang.Codec;
import jade.core.CaseInsensitiveString;

/** file: AP_OntologyOntology.java
 * @author ontology bean generator
 * @version 2016/01/15, 17:02:17
 */
public class AP_Ontology extends jade.content.onto.Ontology  {
  //NAME
  public static final String ONTOLOGY_NAME = "AP_Ontology";
  // The singleton instance of this ontology
  private static ReflectiveIntrospector introspect = new ReflectiveIntrospector();
  private static Ontology theInstance = new AP_Ontology();
  public static Ontology getInstance() {
     return theInstance;
  }


   // VOCABULARY
    public static final String UNTERBREITEANGEBOT_ANGEBOT="angebot";
    public static final String UNTERBREITEANGEBOT="UnterbreiteAngebot";
    public static final String ANFRAGEANGEBOT_JOB="job";
    public static final String ANFRAGEANGEBOT="AnfrageAngebot";
    public static final String AKZEPTIEREANGEBOT="AkzeptiereAngebot";
    public static final String JOB_BEARBEITUNGSDAUER="bearbeitungsdauer";
    public static final String JOB="Job";
    public static final String ANGEBOT_PREIS="preis";
    public static final String ANGEBOT_FERTIGSTELLUNGSTERMIN="fertigstellungstermin";
    public static final String ANGEBOT="Angebot";

  /**
   * Constructor
  */
  private AP_Ontology(){ 
    super(ONTOLOGY_NAME, BasicOntology.getInstance());
    try { 

    // adding Concept(s)
    ConceptSchema angebotSchema = new ConceptSchema(ANGEBOT);
    add(angebotSchema, ess.Ablaufplanung.Angebot.class);
    ConceptSchema jobSchema = new ConceptSchema(JOB);
    add(jobSchema, ess.Ablaufplanung.Job.class);

    // adding AgentAction(s)
    AgentActionSchema akzeptiereAngebotSchema = new AgentActionSchema(AKZEPTIEREANGEBOT);
    add(akzeptiereAngebotSchema, ess.Ablaufplanung.AkzeptiereAngebot.class);
    AgentActionSchema anfrageAngebotSchema = new AgentActionSchema(ANFRAGEANGEBOT);
    add(anfrageAngebotSchema, ess.Ablaufplanung.AnfrageAngebot.class);
    AgentActionSchema unterbreiteAngebotSchema = new AgentActionSchema(UNTERBREITEANGEBOT);
    add(unterbreiteAngebotSchema, ess.Ablaufplanung.UnterbreiteAngebot.class);

    // adding AID(s)

    // adding Predicate(s)


    // adding fields
    angebotSchema.add(ANGEBOT_FERTIGSTELLUNGSTERMIN, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    angebotSchema.add(ANGEBOT_PREIS, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    jobSchema.add(JOB_BEARBEITUNGSDAUER, (TermSchema)getSchema(BasicOntology.INTEGER), ObjectSchema.OPTIONAL);
    anfrageAngebotSchema.add(ANFRAGEANGEBOT_JOB, jobSchema, ObjectSchema.OPTIONAL);
    unterbreiteAngebotSchema.add(UNTERBREITEANGEBOT_ANGEBOT, angebotSchema, ObjectSchema.OPTIONAL);

    // adding name mappings

    // adding inheritance

   }catch (java.lang.Exception e) {e.printStackTrace();}
  }
  }
